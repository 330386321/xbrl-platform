<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.changhong.xbrl.sysmanage.dao.XbrlSmUserMapper">
    <!-- XbrlSmUser的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_XbrlSmUser_Map" type="com.changhong.xbrl.sysmanage.domain.XbrlSmUser">
        <id column="id" property="id" />
        <result column="user_code" property="userCode" />
        <result column="name" property="name" />
        <result column="email" property="email" />
        <result column="password" property="password" />
        <result column="avatar_url" property="avatarUrl" />
        <result column="login_time" property="loginTime" />
        <result column="state" property="state" />
        <result column="remark" property="remark" />
        <result column="create_user" property="createUser" />
        <result column="create_time" property="createTime" />
        <result column="update_user" property="updateUser" />
        <result column="update_time" property="updateTime" />
    </resultMap>

    <resultMap id="result_XbrlSmRole_Map" type="com.changhong.xbrl.sysmanage.domain.XbrlSmRole">
        <result column="id" property="id" />
        <result column="name" property="name" />
        <result column="state" property="state" />
        <result column="remark" property="remark" />
        <result column="create_user" property="createUser" />
        <result column="create_time" property="createTime" />
        <result column="update_user" property="updateUser" />
        <result column="update_time" property="updateTime" />
    </resultMap>
    <resultMap id="result_XbrlSmCompany_Map" type="com.changhong.xbrl.sysmanage.domain.XbrlSmCompany">
        <id column="id" property="id" />
        <result column="identifier_scheme" property="identifierScheme" />
        <result column="company_code" property="companyCode" />
        <result column="company_type" property="companyType" />
        <result column="company_name" property="companyName" />
        <result column="short_name" property="shortName" />
        <result column="name_space_prefix" property="nameSpacePrefix" />
        <result column="company_info" property="companyInfo" />
        <result column="state" property="state" />
        <result column="create_user" property="createUser" />
        <result column="create_time" property="createTime" />
        <result column="update_user" property="updateUser" />
        <result column="update_time" property="updateTime" />
        <result column="mark" property="mark" />
        <result column="separate_code" property="separateCode" />
        <result column="parent_id" property="parentId" />
    </resultMap>

    <!-- 数据库中表名为:xbrl_sm_user的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="xbrl_sm_user_Column">
        xbrl_sm_user.id as id
        ,xbrl_sm_user.user_code as user_code
        ,xbrl_sm_user.name as name
        ,xbrl_sm_user.email as email
        ,xbrl_sm_user.password as password
        ,xbrl_sm_user.avatar_url as avatar_url
        ,xbrl_sm_user.login_time as login_time
        ,xbrl_sm_user.state as state
        ,xbrl_sm_user.remark as remark
        ,xbrl_sm_user.create_user as create_user
        ,xbrl_sm_user.create_time as create_time
        ,xbrl_sm_user.update_user as update_user
        ,xbrl_sm_user.update_time as update_time
    </sql>
    <sql id="xbrl_sm_user_Column_1">
        xbrl_sm_user.id as id
        ,xbrl_sm_user.user_code as userCode
        ,xbrl_sm_user.name as name
        ,xbrl_sm_user.email as email
        ,xbrl_sm_user.password as password
        ,xbrl_sm_user.avatar_url as avatarUrl
        ,xbrl_sm_user.login_time as loginTime
        ,xbrl_sm_user.state as state
        ,xbrl_sm_user.remark as remark
        ,xbrl_sm_user.create_user as createUser
        ,xbrl_sm_user.create_time as createTime
        ,xbrl_sm_user.update_user as updateUser
        ,xbrl_sm_user.update_time as updateTime
    </sql>
    <sql id="xbrl_sm_role_Column">
        xbrl_sm_role.id as id
        ,xbrl_sm_role.name as name
        ,xbrl_sm_role.state as state
        ,xbrl_sm_role.remark as remark
        ,xbrl_sm_role.create_user as create_user
        ,xbrl_sm_role.create_time as create_time
        ,xbrl_sm_role.update_user as update_user
        ,xbrl_sm_role.update_time as update_time
    </sql>
    <sql id="xbrl_sm_role_Column_1">
        xbrl_sm_role.id as id
        ,xbrl_sm_role.name as name
        ,xbrl_sm_role.state as state
        ,xbrl_sm_role.remark as remark
        ,xbrl_sm_role.create_user as createUser
        ,xbrl_sm_role.create_time as createTime
        ,xbrl_sm_role.update_user as updateUser
        ,xbrl_sm_role.update_time as updateTime
    </sql>
    <sql id="xbrl_sm_company_Column">
        xbrl_sm_company.id as id
        ,xbrl_sm_company.identifier_scheme as identifier_scheme
        ,xbrl_sm_company.company_code as company_code
        ,xbrl_sm_company.company_type as company_type
        ,xbrl_sm_company.company_name as company_name
        ,xbrl_sm_company.short_name as short_name
        ,xbrl_sm_company.name_space_prefix as name_space_prefix
        ,xbrl_sm_company.company_info as company_info
        ,xbrl_sm_company.state as state
        ,xbrl_sm_company.create_user as create_user
        ,xbrl_sm_company.create_time as create_time
        ,xbrl_sm_company.update_user as update_user
        ,xbrl_sm_company.update_time as update_time
        ,xbrl_sm_company.mark as mark
        ,xbrl_sm_company.separate_code as separate_code
        ,xbrl_sm_company.parent_id as parent_id
    </sql>
    <sql id="xbrl_sm_company_Column_1">
        xbrl_sm_company.id as id
        ,xbrl_sm_company.identifier_scheme as identifierScheme
        ,xbrl_sm_company.company_code as companyCode
        ,xbrl_sm_company.company_type as companyType
        ,xbrl_sm_company.company_name as companyName
        ,xbrl_sm_company.short_name as shortName
        ,xbrl_sm_company.name_space_prefix as nameSpacePrefix
        ,xbrl_sm_company.company_info as companyInfo
        ,xbrl_sm_company.state as state
        ,xbrl_sm_company.create_user as createUser
        ,xbrl_sm_company.create_time as createTime
        ,xbrl_sm_company.update_user as updateUser
        ,xbrl_sm_company.update_time as updateTime
        ,xbrl_sm_company.mark as mark
        ,xbrl_sm_company.separate_code as separateCode
        ,xbrl_sm_company.parent_id as parentId
    </sql>

    <!--获得类名为:XbrlSmUser对应的数据库表的数据总行数 -->
    <select id="getXbrlSmUserRowCount" parameterType="java.lang.String" resultType="java.lang.Long">
        <bind name="pattern" value="'%' + _parameter.key + '%'" />
        select count(id) from xbrl_sm_user
        where name LIKE #{pattern} OR user_code LIKE #{pattern} OR email LIKE #{pattern}
    </select>
    <!--名称判重-->
    <select id="getRepeatedNameCount" resultType="java.lang.Long">
        select count(id) from xbrl_sm_user
        where name = #{param1}
    </select>
    <!--员工号判重-->
    <select id="getRepeatedCodeCount" resultType="java.lang.Long">
        select count(id) from xbrl_sm_user
        where user_code = #{param1}
    </select>
    <!--邮箱判重-->
    <select id="getRepeatedMailCount" resultType="java.lang.Long">
        select count(id) from xbrl_sm_user
        where email = #{param1}
    </select>
    <!-- 获得类名为:XbrlSmUser对应数据库中表的数据集合 -->
    <select id="selectXbrlSmUser" resultMap="result_XbrlSmUser_Map">
        select 
        <include refid="xbrl_sm_user_Column" /> 
        from xbrl_sm_user
    </select>

    <!-- 获得类名为:XbrlSmUser对应数据库中表的数据集合 -->
    <!--模糊分页查询所有用户，并对用户ID关联的公司标记-->
    <select id="selectUserForRolePage" resultType="java.util.HashMap">
        <bind name="pattern" value="'%' + _parameter.param2 + '%'" />
        select
        <include refid="xbrl_sm_user_Column_1" />,ur.role_id as roleId
        from xbrl_sm_user
        LEFT JOIN (SELECT role_id,user_id
        FROM xbrl_sm_user_role
        WHERE role_id = #{param1}) ur ON xbrl_sm_user.id = ur.user_id
        where name LIKE #{pattern} OR user_code LIKE #{pattern} OR email LIKE #{pattern}
        order by ur.role_id DESC,xbrl_sm_user.user_code LIMIT #{param3},#{param4}
    </select>
    <!--角色ID查询该角色下的所有用户-->
    <select id="selectUserByRoleId" parameterType="java.lang.Integer" resultType="java.util.HashMap">
        select
        <include refid="xbrl_sm_user_Column_1" />
        from  xbrl_sm_user LEFT JOIN xbrl_sm_user_role ON xbrl_sm_user.id = xbrl_sm_user_role.user_id
        WHERE xbrl_sm_user_role.role_id = #{id}
    </select>

    <!--查询所有公司，并对用户ID关联的公司标记-->
    <select id="selectFlagCompanyByUserId" parameterType="java.lang.Integer" resultType="java.util.HashMap">
        select
        <include refid="xbrl_sm_company_Column_1" />,ur.user_id as userId
        from xbrl_sm_company
        LEFT JOIN (SELECT company_id,user_id
        FROM xbrl_sm_company_user
        WHERE user_id = #{id}) ur ON xbrl_sm_company.id = ur.company_id
        order by ur.user_id DESC
    </select>

    <!--查询所有角色，并对用户ID关联的角色标记-->
    <select id="selectFlagRoleByUserId" parameterType="java.lang.Integer" resultType="java.util.HashMap">
        select
        <include refid="xbrl_sm_role_Column_1" />,ur.user_id as userId
        from xbrl_sm_role
        LEFT JOIN (SELECT role_id,user_id
        FROM xbrl_sm_user_role
        WHERE user_id = #{id}) ur ON xbrl_sm_role.id = ur.role_id
        order by ur.user_id DESC
    </select>

    <!-- 获得类名为:XbrlSmUser对应数据库中表的数据集合 -->
    <select id="selectUserForCompanyPage" resultType="java.util.HashMap">
        <bind name="pattern" value="'%' + _parameter.param2 + '%'" />
        select
        <include refid="xbrl_sm_user_Column_1" />,ur.company_id as companyId
        from xbrl_sm_user
        LEFT JOIN (SELECT company_id,user_id
        FROM xbrl_sm_company_user
        WHERE company_id = #{param1}) ur ON xbrl_sm_user.id = ur.user_id
        where name LIKE #{pattern} OR user_code LIKE #{pattern} OR email LIKE #{pattern}
        order by ur.company_id DESC,xbrl_sm_user.user_code LIMIT #{param3},#{param4}
    </select>
    <!--角色ID查询该角色下的所有用户-->
    <select id="selectUserByCompanyId" parameterType="java.lang.Integer" resultType="java.util.HashMap">
        select
        <include refid="xbrl_sm_user_Column_1" />
        from  xbrl_sm_user LEFT JOIN xbrl_sm_company_user ON xbrl_sm_user.id = xbrl_sm_company_user.user_id
        WHERE xbrl_sm_company_user.company_id = #{id}
    </select>

    <!-- 获得类名为:XbrlSmUser对应数据库中表的数据集合 -->
    <select id="selectUserForRole" resultType="java.util.HashMap">
        select
        <include refid="xbrl_sm_user_Column_1" />,xbrl_sm_user_role.role_id as roleId
        from xbrl_sm_user
        LEFT JOIN xbrl_sm_user_role ON xbrl_sm_user.id = xbrl_sm_user_role.user_id
    </select>


    <!-- 获得类名为:XbrlSmUser对应数据库中表的数据集合 -->
    <select id="selectXbrlSmUserPage" resultMap="result_XbrlSmUser_Map">
        <bind name="pattern" value="'%' + _parameter.param1 + '%'" />
        select
        <include refid="xbrl_sm_user_Column" />
        from xbrl_sm_user
        where name LIKE #{pattern} OR user_code LIKE #{pattern} OR email LIKE #{pattern}
        order by ${param4} ${param5} LIMIT #{param2},#{param3}
    </select>

    <!-- 获得一个XbrlSmUser对象,以参数XbrlSmUser对象中不为空的属性作为条件进行查询-->
    <select id="selectXbrlSmUserByObj" parameterType="com.changhong.xbrl.sysmanage.domain.XbrlSmUser" resultMap="result_XbrlSmUser_Map">
        select 
            <include refid="xbrl_sm_user_Column" /> 
        from xbrl_sm_user
        <where>
            <if test="updateTime != null "> and xbrl_sm_user.update_time = #{updateTime}</if>
            <if test="updateUser != null "> and xbrl_sm_user.update_user = #{updateUser}</if>
            <if test="createTime != null "> and xbrl_sm_user.create_time = #{createTime}</if>
            <if test="createUser != null "> and xbrl_sm_user.create_user = #{createUser}</if>
            <if test="remark != null "> and xbrl_sm_user.remark = #{remark}</if>
            <if test="state != null "> and xbrl_sm_user.state = #{state}</if>
            <if test="loginTime != null "> and xbrl_sm_user.login_time = #{loginTime}</if>
            <if test="avatarUrl != null "> and xbrl_sm_user.avatar_url = #{avatarUrl}</if>
            <if test="password != null "> and xbrl_sm_user.password = #{password}</if>
            <if test="email != null "> and xbrl_sm_user.email = #{email}</if>
            <if test="name != null "> and xbrl_sm_user.name = #{name}</if>
            <if test="userCode != null "> and xbrl_sm_user.user_code = #{userCode}</if>
            <if test="id != null "> and xbrl_sm_user.id = #{id}</if>
        </where>
    </select> 

    <!-- 通过XbrlSmUser的id获得对应数据库中表的数据对象-->
    <select id="selectXbrlSmUserById" parameterType="java.lang.Integer" resultMap="result_XbrlSmUser_Map">
        select 
            <include refid="xbrl_sm_user_Column" /> 
        from xbrl_sm_user
        where xbrl_sm_user.id = #{id}
    </select>

    <!--角色ID查询该角色下的所有用户-->
    <select id="selectXbrlSmUserByRoleId" parameterType="java.lang.Integer" resultMap="result_XbrlSmUser_Map">
        select
        <include refid="xbrl_sm_user_Column" />
        from  xbrl_sm_user LEFT JOIN xbrl_sm_user_role ON xbrl_sm_user.id = xbrl_sm_user_role.user_id
        WHERE xbrl_sm_user_role.role_id = #{id}
    </select>

    <!-- 用户关联的角色 -->
    <select id="selectXbrlSmRoleByUserId" parameterType="java.lang.Integer" resultMap="result_XbrlSmRole_Map">
        select
        <include refid="xbrl_sm_role_Column" />
        FROM xbrl_sm_role,xbrl_sm_user_role ur
        WHERE xbrl_sm_role.id = ur.role_id AND ur.user_id = #{id}
    </select>

    <!-- 用户关联的公司 -->
    <select id="selectXbrlSmCompanyByUserId" parameterType="java.lang.Integer" resultMap="result_XbrlSmCompany_Map">
        select
        <include refid="xbrl_sm_company_Column" />
        FROM xbrl_sm_company,xbrl_sm_company_user cu
        WHERE xbrl_sm_company.id = cu.company_id AND cu.user_id = #{id}
    </select>

    <!-- 将XbrlSmUser插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertXbrlSmUser" parameterType="com.changhong.xbrl.sysmanage.domain.XbrlSmUser" useGeneratedKeys="true" keyProperty="id">
        insert into xbrl_sm_user(user_code,name,email,password,avatar_url,login_time,state,remark,create_user,create_time,update_user,update_time)
        values(#{userCode},#{name},#{email},#{password},#{avatarUrl},#{loginTime},#{state},#{remark},#{createUser},#{createTime},#{updateUser},#{updateTime})
    </insert>

    <!-- 将XbrlSmUser中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyXbrlSmUser" parameterType="com.changhong.xbrl.sysmanage.domain.XbrlSmUser">
        insert into xbrl_sm_user
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userCode != null">user_code,</if>
            <if test="name != null">name,</if>
            <if test="email != null">email,</if>
            <if test="password != null">password,</if>
            <if test="avatarUrl != null">avatar_url,</if>
            <if test="loginTime != null">login_time,</if>
            <if test="state != null">state,</if>
            <if test="remark != null">remark,</if>
            <if test="createUser != null">create_user,</if>
            <if test="createTime != null">create_time,</if>
            <if test="updateUser != null">update_user,</if>
            <if test="updateTime != null">update_time,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null"> #{id},</if>
            <if test="userCode != null"> #{userCode},</if>
            <if test="name != null"> #{name},</if>
            <if test="email != null"> #{email},</if>
            <if test="password != null"> #{password},</if>
            <if test="avatarUrl != null"> #{avatarUrl},</if>
            <if test="loginTime != null"> #{loginTime},</if>
            <if test="state != null"> #{state},</if>
            <if test="remark != null"> #{remark},</if>
            <if test="createUser != null"> #{createUser},</if>
            <if test="createTime != null"> #{createTime},</if>
            <if test="updateUser != null"> #{updateUser},</if>
            <if test="updateTime != null"> #{updateTime},</if>
        </trim>
    </insert>

    <!-- 通过XbrlSmUser的id将数据库表中对应的数据删除-->
    <delete id="deleteXbrlSmUserById" parameterType="java.lang.Integer">
        delete from xbrl_sm_user
        where id = #{id}
    </delete>

    <!-- 通过XbrlSmUser的id将数据库表中对应的数据删除-->
    <delete id="deleteXbrlSmUserByIds">
        delete from xbrl_sm_user
        where id in
        <foreach item="item" index="index" collection="array" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <!--批量禁用用户-->
    <update id="disableOrEnableXbrlSmUser">
        update xbrl_sm_user set
        state = #{state}
        where id in
        <foreach item="item" index="index" collection="ids" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>

    <!-- 通过XbrlSmUser的id将XbrlSmUser的数据更新到数据库中对应的表,包括值null的数据-->
        <update id="updateXbrlSmUserById" parameterType="com.changhong.xbrl.sysmanage.domain.XbrlSmUser">
        update xbrl_sm_user set
            user_code=#{userCode}
            ,name=#{name}
            ,email=#{email}
            ,password=#{password}
            ,avatar_url=#{avatarUrl}
            ,login_time=#{loginTime}
            ,state=#{state}
            ,remark=#{remark}
            ,create_user=#{createUser}
            ,create_time=#{createTime}
            ,update_user=#{updateUser}
            ,update_time=#{updateTime}
        where id=#{id}
    </update>

    <!-- 通过XbrlSmUser的id将XbrlSmUser中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyXbrlSmUserById" parameterType="com.changhong.xbrl.sysmanage.domain.XbrlSmUser">
        update xbrl_sm_user
        <set>
            <if test="userCode != null">
                user_code=#{userCode},
            </if>
            <if test="name != null">
                name=#{name},
            </if>
            <if test="email != null">
                email=#{email},
            </if>
            <if test="password != null">
                password=#{password},
            </if>
            <if test="avatarUrl != null">
                avatar_url=#{avatarUrl},
            </if>
            <if test="loginTime != null">
                login_time=#{loginTime},
            </if>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="remark != null">
                remark=#{remark},
            </if>
            <if test="createUser != null">
                create_user=#{createUser},
            </if>
            <if test="createTime != null">
                create_time=#{createTime},
            </if>
            <if test="updateUser != null">
                update_user=#{updateUser},
            </if>
            <if test="updateTime != null">
                update_time=#{updateTime},
            </if>
        </set>
        where id=#{id}
    </update>

    <!--  重置密码 -->
    <update id="updatePwdStateBatch" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update xbrl_sm_user set
            password=#{item.password},
            state=#{item.state}
            where id = #{item.id}
        </foreach>
    </update>

</mapper>